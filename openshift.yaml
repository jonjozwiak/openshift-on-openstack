heat_template_version: 2014-10-16


description: >
  Deploy Atomic/OpenShift 3 on OpenStack.


parameters:

  ssh_key_name:
    type: string
    description: Name of the SSH keypair registered with Nova
    constraints:
    - custom_constraint: nova.keypair

  server_image:
    type: string
    description: Name or ID of the host image registered with Glance
    constraints:
    - custom_constraint: glance.image

  flavor:
    type: string
    description: The Nova flavor to use for the OpenShift nodes
    default: m1.medium
    constraints:
    - custom_constraint: nova.flavor

  external_network:
    type: string
    description: >
      The external network that provides floating IP addresses for the nodes
    constraints:
    - custom_constraint: neutron.network

  dns_nameserver:
    type: comma_delimited_list
    description: address of a dns nameserver reachable in your environment
    default: 8.8.8.8

  node_count:
    type: number
    description: >
      Number of non-master nodes to create.

  lb_count:
    type: number
    description: >
      Number of load balancers to create
    default: 0

  rhn_username:
    type: string
    description: >
      The username for registering the hosts with RHN. If empty, they will not
      be registered.
    default: ''

  rhn_password:
    type: string
    description: >
      The password for registering the hosts with RHN. If empty, they will not
      be registered.
    hidden: true
    default: ''

  rhn_pool:
    type: string
    description: >
      The pool to attach. Will use `subscription-manager attach --auto` if left
      blank.
    hidden: true
    default: ''

  domain_name:
    type: string
    description: >
      The domain name that is going to be used as the base for all hostnames.

  dns_hostname:
    type: string
    description: >
      The hostname that is going to be set for the DNS server.
    default: "ns"

  master_hostname:
    type: string
    description: >
      The hostname that is going to be set for the master.
    default: "openshift-master"

  node_hostname_prefix:
    type: string
    description: >
      The hostname prefix that is going to be set for the nodes.
    default: "openshift-node"

  lb_hostname_prefix:
    type: string
    description: >
      The hostname prefix that is going to be set for the load balancers
    default: "lb"

  deployment_type:
    type: string
    description: >
      The type of Openshift deployment.  origin and enterprise are valid 
    default: "origin"

  ssh_user:
    type: string
    description: >
      The SSH user available on all nodes.
    default: 'cloud-user'

  master_docker_volume_size_gb:
    type: number
    description: >
      size of a cinder volume in GB to allocate to docker for container/image
      storage
    default: 25

  node_docker_volume_size_gb:
    type: number
    description: >
      size of a cinder volume in GB to allocate to docker for container/image
      storage
    default: 25

  openshift_ansible_git_url:
    type: string
    description: >
      The URL to the git repository with the openshift-ansible templates to
      clone.
    default: "https://github.com/openshift/openshift-ansible.git"

  openshift_ansible_git_rev:
    type: string
    description: >
      The git revision of the openshift-ansible repository to check out to.
    # Known working version on Centos 7 + Origin:
    default: "8f6c6824073dff0cea3cd793db2745fb6cf52931"

  native_cluster_hostname:
    type: string
    description: >
      If using native clustering, this is the host name that MUST resolve to 
      the load balancer.  Leave blank if not deploying native clustering
    default: ""

resources:

  fixed_network:
    type: OS::Neutron::Net

  fixed_subnet:
    type: OS::Neutron::Subnet
    properties:
      cidr: 192.168.0.0/24
      network: {get_resource: fixed_network}
      dns_nameservers: {get_param: dns_nameserver}

  external_router:
    type: OS::Neutron::Router
    properties:
      external_gateway_info:
        network: {get_param: external_network}

  external_router_interface:
    type: OS::Neutron::RouterInterface
    properties:
      router_id: {get_resource: external_router}
      subnet: {get_resource: fixed_subnet}

  dns_host:
    depends_on: external_router_interface
    type: dns.yaml
    properties:
      image: {get_param: server_image}
      flavor: {get_param: flavor}
      key_name: {get_param: ssh_key_name}
      ssh_user: {get_param: ssh_user}
      external_network: {get_param: external_network}
      fixed_network: {get_resource: fixed_network}
      fixed_subnet: {get_resource: fixed_subnet}
      rhn_username: {get_param: rhn_username}
      rhn_password: {get_param: rhn_password}
      rhn_pool: {get_param: rhn_pool}
      hostname: {get_param: dns_hostname}
      master_ip_address: {get_attr: [master_floating_ip, floating_ip_address]}
      master_hostname: {get_param: master_hostname}
      port: {get_resource: dnsmasq_port}
      domain_name: {get_param: domain_name}
      floating_ip: {get_attr: [dnsmasq_floating_ip, floating_ip_address]}

  openshift_master:
    depends_on: external_router_interface
    type: master.yaml
    properties:
      image: {get_param: server_image}
      flavor: {get_param: flavor}
      key_name: {get_param: ssh_key_name}
      ssh_user: {get_param: ssh_user}
      external_network: {get_param: external_network}
      dns_ip: {get_attr: [dnsmasq_floating_ip, floating_ip_address]}
      port: {get_resource: master_port}
      fixed_network: {get_resource: fixed_network}
      fixed_subnet: {get_resource: fixed_subnet}
      rhn_username: {get_param: rhn_username}
      rhn_password: {get_param: rhn_password}
      rhn_pool: {get_param: rhn_pool}
      deployment_type: {get_param: deployment_type}
      docker_volume_size: {get_param: master_docker_volume_size_gb}
      floating_ip: {get_attr: [master_floating_ip, floating_ip_address]}
      hostname: {get_param: master_hostname}
      domain_name: {get_param: domain_name}
      ansible_public_key: {get_attr: [ansible_keys, public_key]}
      ansible_private_key: {get_attr: [ansible_keys, private_key]}
      openshift_ansible_git_url: {get_param: openshift_ansible_git_url}
      openshift_ansible_git_rev: {get_param: openshift_ansible_git_rev}
      native_cluster_hostname: {get_param: native_cluster_hostname}

  openshift_nodes:
    depends_on: external_router_interface
    type: OS::Heat::AutoScalingGroup
    properties:
      desired_capacity: {get_param: node_count}
      min_size: 0
      max_size: 100
      resource:
        type: node.yaml
        properties:
          image: {get_param: server_image}
          flavor: {get_param: flavor}
          key_name: {get_param: ssh_key_name}
          ssh_user: {get_param: ssh_user}
          external_network: {get_param: external_network}
          dns_ip: {get_attr: [dnsmasq_floating_ip, floating_ip_address]}
          fixed_network: {get_resource: fixed_network}
          fixed_subnet: {get_resource: fixed_subnet}
          docker_volume_size: {get_param: node_docker_volume_size_gb}
          rhn_username: {get_param: rhn_username}
          rhn_password: {get_param: rhn_password}
          rhn_pool: {get_param: rhn_pool}
          hostname_prefix: {get_param: node_hostname_prefix}
          domain_name: {get_param: domain_name}
          ansible_public_key: {get_attr: [ansible_keys, public_key]}
          master_node: {get_attr: [openshift_master, resource.host]}

  lb_nodes:
    depends_on: external_router_interface
    type: OS::Heat::ResourceGroup
    properties:
      count: {get_param: lb_count}
      resource_def:
        type: lb.yaml
        properties:
          image: {get_param: server_image}
          flavor: {get_param: flavor}
          key_name: {get_param: ssh_key_name}
          ssh_user: {get_param: ssh_user}
          external_network: {get_param: external_network}
          dns_ip: {get_attr: [dnsmasq_floating_ip, floating_ip_address]}
          fixed_network: {get_resource: fixed_network}
          fixed_subnet: {get_resource: fixed_subnet}
          rhn_username: {get_param: rhn_username}
          rhn_password: {get_param: rhn_password}
          rhn_pool: {get_param: rhn_pool}
          hostname_prefix: {get_param: lb_hostname_prefix}
          domain_name: {get_param: domain_name}
          ansible_public_key: {get_attr: [ansible_keys, public_key]}

  dnsmasq_port:
    type: OS::Neutron::Port
    properties:
      security_groups:
      - {get_resource: dnsmasq_security_group}
      network: {get_resource: fixed_network}
      fixed_ips:
      - subnet: {get_resource: fixed_subnet}
      replacement_policy: AUTO

  dnsmasq_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      - protocol: tcp
        port_range_min: 22
        port_range_max: 22
      - protocol: tcp
        port_range_min: 53
        port_range_max: 53
      - protocol: udp
        port_range_min: 53
        port_range_max: 53

  dnsmasq_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: dnsmasq_port}

  master_port:
    type: OS::Neutron::Port
    properties:
      security_groups:
      - {get_resource: master_security_group}
      network: {get_resource: fixed_network}
      fixed_ips:
      - subnet: {get_resource: fixed_subnet}
      replacement_policy: AUTO

  master_security_group:
    type: OS::Neutron::SecurityGroup
    properties:
      rules:
      - protocol: icmp
      # Just open everything for now:
      - protocol: tcp
        port_range_min: 0
        port_range_max: 65535
      - protocol: udp
        port_range_min: 0
        port_range_max: 65535

  master_floating_ip:
    type: OS::Neutron::FloatingIP
    properties:
      floating_network: {get_param: external_network}
      port_id: {get_resource: master_port}

  ansible_keys:
    type: OS::Nova::KeyPair
    properties:
      name:
        str_replace:
          template: "ansible_keys_STACK"
          params:
            STACK: {get_param: "OS::stack_id"}
      save_private_key: True

  deployment_node_hosts:
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_attr: [dns_host, resource.node_hosts]
      server:
        get_attr: [dns_host, resource.host]
      input_values:
        node_etc_hosts:
          list_join:
          - "\n"
          - {get_attr: [openshift_nodes, outputs_list, etc_hosts]}

  deployment_run_ansible:
    depends_on: deployment_node_hosts
    type: OS::Heat::SoftwareDeployment
    properties:
      config:
        get_attr: [openshift_master, resource.run_ansible]
      server:
        get_attr: [openshift_master, resource.host]
      input_values:
        node_hostnames:
          list_join:
          - " "
          - {get_attr: [openshift_nodes, outputs_list, hostname]}
        lb_hostnames:
          list_join:
          - " "
          - {get_attr: [lb_nodes, outputs_list, hostname]}

outputs:
  # TODO: return the master's certificate authority here so we can use the CLI
  # outside of the host.
  # It's stored at `/etc/openshift/master/ca.crt`
  master_ip:
    description: IP address of the OpenShift master node
    value: {get_attr: [master_floating_ip, floating_ip_address]}
  dns_ip:
    description: IP address of the DNS server OpenShift relies on
    value: {get_attr: [dnsmasq_floating_ip, floating_ip_address]}
  console_url:
    description: URL of the OpenShift web console
    value: {get_attr: [openshift_master, console_url]}
  api_url:
    description: URL entrypoint to the OpenShift API
    value: {get_attr: [openshift_master, api_url]}
  master_data:
    description: Status of cluster setup on the master.
    value: {get_attr: [openshift_master, wc_data]}
  host_ips:
    description: IP addresses of the OpenShift nodes
    value: {get_attr: [openshift_nodes, outputs_list, ip_address]}
  # scale_up_url:
  #   description: A URL that triggers a scale up event on HTTP POST
  #   value: {get_attr: [scale_up, alarm_url]}
  # scale_down_url:
  #   description: A URL that triggers a scale down event on HTTP POST
  #   value: {get_attr: [scale_down, alarm_url]}
